import{_ as a,c as n,o as p,ae as e}from"./chunks/framework.Cd-3tpCq.js";const t="/assets/agentcard-eg.BR-qzgjA.png",i="/assets/device-import.6OchCRjr.png",l="/assets/3.device-code.B9HDURo3.png",o="/assets/2.2.BLRTIjwa.png",u="/assets/2.3.Cak3LmrE.png",v=JSON.parse('{"title":"设备绑定","description":"","frontmatter":{"title":"设备绑定"},"headers":[],"relativePath":"xrobot/device/device-bind.md","filePath":"xrobot/device/device-bind.md","lastUpdated":1754290520000}'),c={name:"xrobot/device/device-bind.md"};function q(r,s,d,m,_,h){return p(),n("div",null,s[0]||(s[0]=[e('<h1 id="设备绑定" tabindex="-1">设备绑定 <a class="header-anchor" href="#设备绑定" aria-label="Permalink to &quot;设备绑定&quot;">​</a></h1><h2 id="_1-绑定-mac-地址" tabindex="-1">1. 绑定 MAC 地址 <a class="header-anchor" href="#_1-绑定-mac-地址" aria-label="Permalink to &quot;1. 绑定 MAC 地址&quot;">​</a></h2><ul><li><p>第一步：访问控制台，注册账号，登录</p></li><li><p>第二步：新建智能体：</p><img src="'+t+'"></li><li><p>第三步：在“设备管理”中，选择 批量导入，填写设备的 mac 地址：</p><img src="'+i+'"><p>不知道设备 mac 地址怎么办？</p></li></ul><h2 id="_2-绑定设备激活码" tabindex="-1">2. 绑定设备激活码 <a class="header-anchor" href="#_2-绑定设备激活码" aria-label="Permalink to &quot;2. 绑定设备激活码&quot;">​</a></h2><ul><li>第三步：通过 在“设备管理”中，选择新增，填写 设备激活码 <img src="'+l+`"></li></ul><p>怎么获取设备激活码？</p><h3 id="_2-1-获取设备激活码" tabindex="-1">2.1 获取设备激活码 <a class="header-anchor" href="#_2-1-获取设备激活码" aria-label="Permalink to &quot;2.1 获取设备激活码&quot;">​</a></h3><p>通过 OTA 通信协议获取，如下详细描述</p><h4 id="_2-1-1-ota-协议描述" tabindex="-1">2.1.1 OTA 协议描述 <a class="header-anchor" href="#_2-1-1-ota-协议描述" aria-label="Permalink to &quot;2.1.1 OTA 协议描述&quot;">​</a></h4><p>请求方法</p><ul><li>POST /api/ota/ 请求头</li><li>Device-Id: 设备的唯一标识符（必需，使用 MAC 地址或由硬件 ID 生成的伪 MAC 地址）</li><li>Client-Id: 客户端的唯一标识符，由软件自动生成的 UUID v4（必需，擦除 FLASH 或重装后会变化）</li><li>User-Agent: 客户端的名字和版本号（必需，例如 esp-box-3/1.5.6）</li><li>Accept-Language: 客户端的当前语言（可选，例如 zh-CN） 请求体 请求体应为 JSON 格式，包含以下字段：</li><li>application: 包含设备当前固件版本信息的对象（必需） <ul><li>version: 当前固件版本号</li><li>elf_sha256: 用于校验固件文件完整性 Hash</li></ul></li><li>mac_address: MAC 地址（可选，与 HTTP header 里的 device-id 一致）</li><li>uuid: ClientId（可选，与 HTTP header 里的 client-id 一致）</li><li>chip_model_name: 设备的芯片型号，例如 esp32s3（可选）</li><li>flash_size: 设备的闪存大小（可选）</li><li>psram_size: 设备的 PSRAM 大小（可选）</li><li>partition_table: 设备分区表，用于检查是否有足够的空间，用于下载固件（可选）</li><li>board: 开发板类型与版本，以及所运行的环境（必需） <ul><li>type: 开发板类型</li><li>name: 开发板 SKU（与 user-agent 中的前面部分保持一致）</li><li>ssid: 设备接入的 Wi-Fi 名字</li><li>rssi: 设备接入的 Wi-Fi 信号强度 响应 成功响应 响应体为 JSON 格式，包含以下字段：</li></ul></li><li>activation: 设备需要激活 <ul><li>code: 激活码</li><li>message: 屏幕显示消息</li></ul></li><li>mqtt: MQTT 协议服务器配置信息</li><li>websocket: Websocket 协议服务器配置信息</li><li>server_time: 服务器时间信息（用于同步设备时间） <ul><li>timestamp: 当前时间戳</li><li>timezone: 服务器时区</li><li>timezone_offset: 服务器时区偏移量</li></ul></li><li>firmware: 最新版本固件信息 <ul><li>version: 固件版本号</li><li>url: 固件下载链接（如果有更新） 错误响应</li></ul></li><li>400 Bad Request: 请求缺少必需的字段或字段无效 <ul><li>error: 错误信息</li></ul></li><li>500 Internal Server Error: 服务器内部错误 - error: 错误信息 2.1.2 OTA 协议举例 以 Web 端模拟设备为例，也可以直接体验我们的 Web-demo</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST https://xrobo.qiniuapi.com/v1/ota/</span></span>
<span class="line"><span>Host: xrobo.qiniuapi.com</span></span>
<span class="line"><span>Accept-Language: zh-CN</span></span>
<span class="line"><span>Content-Type: application/json</span></span>
<span class="line"><span>Device-Id: D4:06:06:B6:A9:FB</span></span>
<span class="line"><span>Client-Id: web_test_client</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>{&quot;version&quot;:0,</span></span>
<span class="line"><span>&quot;uuid&quot;:&quot;&quot;,</span></span>
<span class="line"><span>&quot;application&quot;:</span></span>
<span class="line"><span>{ &quot;name&quot;:&quot;xiaoniu-web-test&quot;,</span></span>
<span class="line"><span>&quot;version&quot;:&quot;1.0.0&quot;,</span></span>
<span class="line"><span>&quot;compile_time&quot;:&quot;2025-04-16 10:00:00&quot;,</span></span>
<span class="line"><span>&quot;idf_version&quot;:&quot;4.4.3&quot;,</span></span>
<span class="line"><span>&quot;elf_sha256&quot;:&quot;1234567890abcdef1234567890abcdef1234567890abcdef&quot;</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;ota&quot;:{&quot;label&quot;:&quot;xiaoling-web-test&quot;},</span></span>
<span class="line"><span>&quot;board&quot;:{&quot;type&quot;:&quot;xiaoling-web-test&quot;,</span></span>
<span class="line"><span>&quot;ssid&quot;:&quot;xiaoling-web-test&quot;,</span></span>
<span class="line"><span>&quot;rssi&quot;:0,&quot;channel&quot;:0,</span></span>
<span class="line"><span>&quot;ip&quot;:&quot;192.168.1.1&quot;,</span></span>
<span class="line"><span>&quot;mac&quot;:&quot;D4:06:06:B6:A9:FA&quot;},</span></span>
<span class="line"><span>&quot;flash_size&quot;:0,</span></span>
<span class="line"><span>&quot;minimum_free_heap_size&quot;:0,</span></span>
<span class="line"><span>&quot;mac_address&quot;:&quot;D4:06:06:B6:A9:FA&quot;,</span></span>
<span class="line"><span>&quot;chip_model_name&quot;:&quot;&quot;,</span></span>
<span class="line"><span>&quot;chip_info&quot;:{&quot;model&quot;:0,&quot;cores&quot;:0,&quot;revision&quot;:0,&quot;features&quot;:0},</span></span>
<span class="line"><span>&quot;partition_table&quot;:[{&quot;label&quot;:&quot;&quot;,&quot;type&quot;:0,&quot;subtype&quot;:0,&quot;address&quot;:0,&quot;size&quot;:0}]}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>响应示例</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>&quot;server_time&quot;: {</span></span>
<span class="line"><span>&quot;timestamp&quot;: 1752119934489,</span></span>
<span class="line"><span>&quot;timeZone&quot;: &quot;Asia/Shanghai&quot;,</span></span>
<span class="line"><span>&quot;timezone_offset&quot;: 480</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;activation&quot;: {</span></span>
<span class="line"><span>&quot;code&quot;: &quot;608303&quot;,</span><span> //【这就是我们需要的激活码】</span></span>
<span class="line"><span>&quot;message&quot;: &quot;http://60.205.58.18:8002\\n608303&quot;,</span></span>
<span class="line"><span>&quot;challenge&quot;: &quot;D4:06:06:B6:A9:FA&quot;</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;firmware&quot;: {</span></span>
<span class="line"><span>&quot;version&quot;: &quot;1.0.0&quot;,</span></span>
<span class="line"><span>&quot;url&quot;: &quot;https://xrobo.qiniuapi.com/v1/ota/INVALID_FIRMWARE_FOR_TEST&quot;</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&quot;websocket&quot;: {</span></span>
<span class="line"><span>&quot;url&quot;: &quot;ws://xrobo-io.qiniuapi.com/v1/ws/&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>错误响应</span></span>
<span class="line"><span>//缺少 device-id</span></span>
<span class="line"><span>HTTP/1.1 400 Bad Request</span></span>
<span class="line"><span>Content-Type: application/json</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>&quot;error&quot;: &quot;Device ID is required&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//无效的 OTA 请求</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>&quot;error&quot;: &quot;Invalid OTA request&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//服务器内部错误</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>&quot;error&quot;: &quot;Failed to read device auto_update status&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_2-2-esp32-设备通过-ota-拿到激活码后-没有及时绑定会怎么样" tabindex="-1">2.2 ESP32 设备通过 OTA 拿到激活码后，没有及时绑定会怎么样？ <a class="header-anchor" href="#_2-2-esp32-设备通过-ota-拿到激活码后-没有及时绑定会怎么样" aria-label="Permalink to &quot;2.2 ESP32 设备通过 OTA 拿到激活码后，没有及时绑定会怎么样？&quot;">​</a></h3><p>首先，设备会一直定期的发送 ota/activate 请求，提醒您去绑定；此时设备也无法唤醒，无法通话</p><img src="`+o+'" class="img-center"><p>其次，如果服务端 auth 验证需要 token，这个 token 是有保活期，超过了，需要重启设备，因为市面上的固件都没有定期 ota 过程，只有重启设备才会有 ota 消息发送。</p><h3 id="_2-3-怎么重新绑定" tabindex="-1">2.3 怎么重新绑定 <a class="header-anchor" href="#_2-3-怎么重新绑定" aria-label="Permalink to &quot;2.3 怎么重新绑定&quot;">​</a></h3><p>需要在控制台先解除绑定，再重新绑定，设备解除绑定后，设备当前通话并不会立刻终止，只有当重新开启会话时，会提醒你重启设备，重新拿到激活码，重新去走一遍流程。</p><img src="'+u+'" class="img-center">',19)]))}const g=a(c,[["render",q]]);export{v as __pageData,g as default};
